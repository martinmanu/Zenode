export const config = {
  // Canvas settings
  canvas: {
    type: "dotted", // Options: "plain", "lined", "dotted"
    innerPointColor: "#000000",
    backgroundColor: "#ffffff",
    gridSize: 20, // Should correlate with globalProperties to maintain visual harmony
    locked: false, // If true, canvas interaction is disabled
  },

  // General canvas behavior and interaction settings
  canvasProperties: {
    zoomEnabled: true,
    panEnabled: true,
    snapToGrid: true,
    defaultNodeSpacing: 50,
    // Drag behavior for nodes:
    // Options: "smooth", "instant", "onDragEnd" (for connection drawing, for example)
    dragType: "smooth", 
  },

  // Shape definitions
  shapes: {
    default: {
      // Circle configuration â€“ users can override properties here
      circle: {
        radius: 30,
        color: "#008000",
        stroke: { width: 2, color: "#000000" },
        textColor: "#ffffff",
        boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)",
      },
      // Rectangle configuration
      rectangle: {
        width: 120,
        height: 60,
        color: "#0000ff",
        borderRadius: { leftTop: 3, leftBottom: 3, rightTop: 3, rightBottom: 3 },
        stroke: { width: 2, color: "#000000" },
        textColor: "#ffffff",
        boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)",
      },
    },
    // Extra shapes where the user can define a custom D3 drawing function
    extraShapes: [
      {
        name: "hexagon",
        d3Function: (svg: any) => {
          return svg
            .append("polygon")
            .attr("points", "30,0 60,15 60,45 30,60 0,45 0,15")
            .attr("fill", "#ff6600")
            .attr("stroke", "#333333")
            .attr("stroke-width", 2);
        },
      },
    ],
  },

  // Connection definitions
  connections: {
    default: {
      // Straight line configuration
      straight: {
        type: "line",
        style: "solid",
        color: "#000000",
        width: 2,
        lineStyle: {
          dashArray: [], // For solid lines leave empty; if dashed, set e.g., [4, 4]
          innerTextEnabled: false,
          innerText: "",
          innerTextColor: "#000000",
          icon: null,
          clickFunction: null,
        },
      },
      // Curved (bezier) connection configuration
      curved: {
        type: "bezier",
        style: "smooth",
        color: "#666666",
        width: 2,
        lineStyle: {
          dashArray: [],
          innerTextEnabled: false,
          innerText: "",
          innerTextColor: "#000000",
          icon: null,
          clickFunction: null,
        },
      },
      // S-shaped connection configuration
      sShaped: {
        type: "s-shaped",
        style: "smooth",
        color: "#333333",
        width: 2,
        lineStyle: {
          dashArray: [],
          innerTextEnabled: false,
          innerText: "",
          innerTextColor: "#000000",
          icon: null,
          clickFunction: null,
        },
      },
      // L-bent connection configuration
      lBent: {
        type: "l-bent",
        style: "cornered",
        color: "#444444",
        width: 2,
        lineStyle: {
          dashArray: [],
          innerTextEnabled: false,
          innerText: "",
          innerTextColor: "#000000",
          icon: null,
          clickFunction: null,
        },
      },
    },
    custom: {
      // Custom dotted line configuration
      dotted: {
        type: "line",
        style: "dashed",
        color: "#ff0000",
        width: 2,
        lineStyle: {
          dashArray: [4, 4],
          innerTextEnabled: false,
          innerText: "",
          innerTextColor: "#000000",
          icon: null,
          clickFunction: null,
        },
      },
    },
  },

  // Global properties for overall behavior and layout
  globalProperties: {
    nodeSpacing: 80,
    connectionGap: 10,
    animationEnabled: true,
    // Validation function ensuring that grid size and shape sizes align visually
    validateGridSize: (gridSize: number, shapeWidth: number) => {
      return gridSize >= shapeWidth / 2;
    },
  },

  // Options for dragging behavior and how connections are drawn during dragging
  dragOptions: {
    enableDrag: true,
    // Drag mode: "smooth" (continuous update) or "instant" (only update on drag end)
    dragMode: "smooth",
    // Connection drawing trigger: "onDrag" (update while dragging) or "onDragEnd" (update after release)
    connectionDraw: "onDragEnd",
  },
};
